import bluetooth
from bluetooth import BLE, UUID, FLAG_READ, FLAG_WRITE
import struct
from machine import Pin
import neopixel
import time

def advertising_payload(name=None, services=None):
    payload = bytearray()
    if name:
        payload += bytearray((len(name) + 1, 0x09)) + name.encode('utf-8')
    if services:
        for uuid in services:
            uuid_bytes = bytes(uuid)
            if len(uuid_bytes) == 16:
                payload += bytearray((17, 0x07)) + uuid_bytes
            elif len(uuid_bytes) == 2:
                payload += bytearray((3, 0x03)) + uuid_bytes
            else:
                raise ValueError("Unsupported UUID length")
    return payload

class BLEPeripheral:
    def __init__(self, num_pixels, pin):
        self.ble = BLE()
        self.ble.active(True)
        self.connected = False
        self.num_pixels = num_pixels
        self.np = neopixel.NeoPixel(Pin(pin), num_pixels)
        self.service_handle = None
        self.char_handle = None
        self.setup_services()
        self.start_advertising()

    def setup_services(self):
        # Define UUIDs
        service_uuid = UUID("3322271e-756a-443d-8a9d-2f90c7a73bf5")
        char_uuid = UUID("9b7a6e35-cb8d-473b-9346-15507d362aa3")
        
        # Define characteristic
        char = (char_uuid, FLAG_WRITE | FLAG_READ)
        services = [(service_uuid, [char])]
        
        # Register services
        handles = self.ble.gatts_register_services(services)
        print(f"Handles received: {handles}")  # Debug print
        
        # Extract the integer handle values from the nested tuples
        if handles and len(handles) > 0 and len(handles[0]) > 0:
            self.service_handle = handles[0][0]  # Extract the integer
            self.char_handle = 16  # We know this is the characteristic handle from debug output
            print(f"Service Handle: {self.service_handle}")
            print(f"Char Handle: {self.char_handle}")
        else:
            raise ValueError("Failed to register services")

    def ble_callback(self, event, data):
        if event == 1:  # Connect
            print("Device connected")
            self.connected = True
            
        elif event == 2:  # Disconnect
            print("Device disconnected")
            self.connected = False
            self.start_advertising()
            
        elif event == 3:  # Write
            handle, value = data
            print(f"Write event - handle: {handle}, value: {value}")
            try:
                # Read the value using the characteristic handle
                buffer = self.ble.gatts_read(self.char_handle)
                if buffer:
                    print(f"Raw buffer received: {buffer}")
                    try:
                        # Try to decode as string first (for RGB values)
                        command = buffer.decode().strip()
                        print(f"Decoded command: {command}")
                        if ',' in command:
                            self.process_command(command)
                        else:
                            # Handle as single byte
                            byte_value = buffer[0]
                            print(f"Received byte value: {byte_value}")
                            if byte_value == 1:
                                #self.set_color(255, 0, 0)
                                print(f"String Decoding Failed")
                                
                    except UnicodeError:
                        # Handle as raw bytes if decode fails
                        byte_value = buffer[0]
                        print(f"Received raw byte: {byte_value}")
                        if byte_value == 1:
                          #  self.set_color(255, 0, 0)
                          print(f"Unicode Error: Byte Value = 1")
            except Exception as e:
                print(f"Error in callback: {e}")

    def process_command(self, command):
        try:
            r, g, b = map(int, command.split(","))
            print(f"Setting RGB: {r}, {g}, {b}")
            self.set_color(r, g, b)
        except ValueError as e:
            print(f"Invalid RGB format. Expected: R,G,B. Error: {e}")

    def set_color(self, r, g, b):
        for i in range(self.num_pixels):
            self.np[i] = (r, g, b)
        self.np.write()
        print(f"Color set to RGB({r}, {g}, {b})")

    def start_advertising(self):
        name = "ESP32_BLE"
        service_uuid = UUID("3322271e-756a-443d-8a9d-2f90c7a73bf5")
        payload = advertising_payload(name=name, services=[service_uuid])
        self.ble.gap_advertise(100, adv_data=payload)
        self.ble.irq(self.ble_callback)
        print("BLE is ready and advertising")

# Initialize the peripheral
ble_peripheral = BLEPeripheral(10, 26)
